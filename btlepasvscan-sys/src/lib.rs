/* automatically generated by rust-bindgen */

pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint32_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btlepasvscan_ctx {
    pub sock: ::std::os::raw::c_int,
    pub buf: [u8; 1500usize],
    pub address: [::std::os::raw::c_char; 18usize],
    pub data: *mut u8,
    pub length: u32,
    pub error: u8,
}
#[test]
fn bindgen_test_layout_btlepasvscan_ctx() {
    assert_eq!(
        ::std::mem::size_of::<btlepasvscan_ctx>(),
        1544usize,
        concat!("Size of: ", stringify!(btlepasvscan_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<btlepasvscan_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(btlepasvscan_ctx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btlepasvscan_ctx>())).sock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btlepasvscan_ctx),
            "::",
            stringify!(sock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btlepasvscan_ctx>())).buf as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(btlepasvscan_ctx),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btlepasvscan_ctx>())).address as *const _ as usize },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(btlepasvscan_ctx),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btlepasvscan_ctx>())).data as *const _ as usize },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(btlepasvscan_ctx),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btlepasvscan_ctx>())).length as *const _ as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(btlepasvscan_ctx),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btlepasvscan_ctx>())).error as *const _ as usize },
        1540usize,
        concat!(
            "Offset of field: ",
            stringify!(btlepasvscan_ctx),
            "::",
            stringify!(error)
        )
    );
}
extern "C" {
    pub fn btlepasvscan_open() -> *mut btlepasvscan_ctx;
}
extern "C" {
    pub fn btlepasvscan_read(arg1: *mut btlepasvscan_ctx) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn btlepasvscan_close(arg1: *mut btlepasvscan_ctx);
}
